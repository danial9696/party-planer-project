// ==========================================================================
// * Tools / Mixins
// ==========================================================================

@use '../01-settings/settings.breakpoints' as *;

// * Vertically centers the element inside of its first non-static parent,
@mixin vertical-center {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

// * Horizontally centers the element inside of its first non-static parent,
@mixin horizontal-center {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

// * Absolutely centers the element inside of its first non-static parent,
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// * Generate a font-size
/* The `@mixin font-size` is a SCSS mixin that generates a font-size property with optional line-height
and important flag. It first checks if the provided font-size value is a number and if it is in
pixels or viewport width (vw) units. If not, it throws an error. It also checks if the important
flag is set to true or false, and throws an error if it is not a boolean value. */
@mixin font-size($font-size, $line-height: auto, $important: false) {
  @if (type-of($font-size) == number) {
    @if (unit($font-size) != 'px' and unit($font-size) != 'rem') {
      @error "`#{$font-size}` needs to be a pixel or a vw value.";
    }
  } @else {
    @error "`#{$font-size}` needs to be a number.";
  }

  @if ($important == true) {
    $important: important;
  } @else if ($important == false) {
    $important: null;
  } @else {
    @error "`#{$important}` needs to be `true` or `false`.";
  }

  // * We provide a `px` fallback for old IEs not supporting `rem` values.
  font-size: $font-size $important;
  @if (unit($font-size) == 'px') {
    font-size: ($font-size / $global-font-size) * 1rem $important;
  } @else if(unit($font-size) == 'vw') {
    font-size: $font-size;
  }
}

//
// * Responsive font-sizes
//
/* The `@mixin responsive-font-size` is a SCSS mixin that generates responsive font-size properties
based on a map of font-size values and breakpoints. It takes two arguments: `-map`, which is a
map of font-size values and breakpoints, and `-breakpoints`, which is an optional map of custom
breakpoints. */
@mixin responsive-font-size($fs-map, $fs-breakpoints: $grid-breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      @include font-size($fs-font-size);
      font-size: $fs-font-size;
    } @else {
      // If $fs-font-size is a key that exists in
      // $fs-breakpoints, use the value
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }
      @media screen and (min-width: $fs-breakpoint) {
        @include font-size($fs-font-size);
        font-size: $fs-font-size;
      }
    }
  }
}
